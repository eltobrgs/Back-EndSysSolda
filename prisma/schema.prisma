// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Aluno {
  id            Int           @id @default(autoincrement())
  nome          String
  cpf           String        @unique
  email         String        @unique
  telefone      String
  idade         Int
  usaOculos     Boolean       @default(false)
  destroCanhoto String        @default("DESTRO")
  cursoId       Int
  curso         Curso         @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  alunoModulos  AlunoModulo[]
  presencas     Presenca[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("alunos")
}

model Curso {
  id                 Int           @id @default(autoincrement())
  nome               String
  descricao         String
  cargaHorariaTotal Int
  preRequisitos     String?
  materialNecessario String?
  modulos           Modulo[]
  alunos            Aluno[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Modulo {
  id                Int           @id @default(autoincrement())
  nome              String
  descricao         String
  cargaHorariaTotal Int
  curso             Curso         @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  cursoId           Int
  celulas           Celula[]
  alunoModulos      AlunoModulo[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Celula {
  id            Int        @id @default(autoincrement())
  ordem         Int
  siglaTecnica  String
  modulo        Modulo     @relation(fields: [moduloId], references: [id], onDelete: Cascade)
  moduloId      Int
  presencas     Presenca[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Presenca {
  id          Int       @id @default(autoincrement())
  aluno       Aluno     @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  alunoId     Int
  celula      Celula    @relation(fields: [celulaId], references: [id], onDelete: Cascade)
  celulaId    Int
  data        DateTime?
  presente    Boolean?
  horasFeitas Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([alunoId, celulaId], name: "alunoId_celulaId")
}

model AlunoModulo {
  id            Int       @id @default(autoincrement())
  aluno         Aluno     @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  alunoId       Int
  modulo        Modulo    @relation(fields: [moduloId], references: [id], onDelete: Cascade)
  moduloId      Int
  status        String    @default("pendente")
  dataInicio    DateTime?
  dataFim       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([alunoId, moduloId], name: "alunoId_moduloId")
}
